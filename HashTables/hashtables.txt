stores key value pairs
key => hash function => address to store the value
hash tables are deterministic 

space O(n)
insert O(1)
lokkup O(1)
delete O(1)

could be O(n) with hash collisions  and dynamic array resizing but unlikely.

Improved time complexity ? fast Access O(1), tradeoff : more memory O(n)
Collision ? Linked List

Handle collisions ==> Chaining using linked lists // Open addressing
                    ==> Open addressing Linear Probing means searching hash(key) + 1
                    ==> Quadratic Probing
                    ==> Double Hashing
Linear           | Quadratic
hash(key) + i    | hash(key) + i2

Chaining using linked lists
1. compute the key's hash.
2. get the int or the long. 
(two different keys could have the same hash code as there may be an infinite number of keys and a finite number of ints)
3. map the hash code to an index in the array  (like hash(key) % array.length)
4. At this index there is a linked list that stores the entry (key, value) we must use linked list because of the collisions.
5. to retrieve the value by its key we repeat teh same process(compute the index using the hash(key) and search through the linked list) 


HashTables used in : 
- Spell checkers
- Dictionaries
- Compilers
- Code editors

HashTables in java :
Map interface
HashMap
HashTable
TreeMap
 
Map<Integer, String> map = new HashMap<>();
map.put(1, "mariam");
map.put(1, "machaallah");
// mariam will be ovritten by the machaallah
// in hashmaps we can not have duplicate keys
// we can store null values map.put(4, null)
// we can store null key null value also map.put(null, null)
System.out.println(map);
map.containsKey(3); O(1)
map.containsValue("mariam"); O(n)
// for(int item: map.keySet()) // keys
// for (Map.Entry<Integer, String> entry : map.entrySet())  // pairs

// Interface Set 
// Implementation : HashSet, TreeSet, LinkedHashSet, AbstractSets
Set<Integer> set = new HashSet<>();
set.add(1);
set.add(2);
set.add(1);
set.add(3);
System.out.println(set);
// 1, 2, 3
set.clear();
sets used to find the first repeated character

hash functions maps a key  to a hash.
map.put(123456, "mari")
// array of 100
// hash functions maps keys to arrays
public static int hash(int number) {
    return number % 100;
}
str.hashCode()